<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="374.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="357" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="357" > </text>
<g id="frames">
<g >
<title>rcu_report_qs_rnp (2 samples, 0.08%)</title><rect x="1054.2" y="85" width="1.0" height="15.0" fill="rgb(248,31,38)" rx="2" ry="2" />
<text  x="1057.21" y="95.5" ></text>
</g>
<g >
<title>rtTimerLinuxStdCallback (2 samples, 0.08%)</title><rect x="1057.7" y="101" width="1.0" height="15.0" fill="rgb(212,39,50)" rx="2" ry="2" />
<text  x="1060.72" y="111.5" ></text>
</g>
<g >
<title>PSParallelCompact::update_and_deadwood_in_dense_prefix(ParCompactionManager*, PSParallelCompact::SpaceId, unsigned long, unsigned long) (619 samples, 26.28%)</title><rect x="48.1" y="229" width="310.1" height="15.0" fill="rgb(205,206,39)" rx="2" ry="2" />
<text  x="51.08" y="239.5" >PSParallelCompact::update_and_deadwood_in..</text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)      (9 samples, 0.38%)</title><rect x="1059.2" y="197" width="4.5" height="15.0" fill="rgb(244,121,7)" rx="2" ry="2" />
<text  x="1062.22" y="207.5" ></text>
</g>
<g >
<title>__do_page_fault (1 samples, 0.04%)</title><rect x="1058.7" y="165" width="0.5" height="15.0" fill="rgb(249,187,49)" rx="2" ry="2" />
<text  x="1061.72" y="175.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*)      (2 samples, 0.08%)</title><rect x="46.1" y="197" width="1.0" height="15.0" fill="rgb(248,168,29)" rx="2" ry="2" />
<text  x="49.08" y="207.5" ></text>
</g>
<g >
<title>MoveAndUpdateClosure::do_addr(HeapWordImpl**, unsigned long) (24 samples, 1.02%)</title><rect x="28.5" y="165" width="12.1" height="15.0" fill="rgb(223,25,1)" rx="2" ry="2" />
<text  x="31.54" y="175.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (2 samples, 0.08%)</title><rect x="835.7" y="133" width="1.1" height="15.0" fill="rgb(226,176,18)" rx="2" ry="2" />
<text  x="838.75" y="143.5" ></text>
</g>
<g >
<title>rcu_process_callbacks (2 samples, 0.08%)</title><rect x="1054.2" y="101" width="1.0" height="15.0" fill="rgb(228,52,50)" rx="2" ry="2" />
<text  x="1057.21" y="111.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1180.0" y="197" width="1.0" height="15.0" fill="rgb(218,6,15)" rx="2" ry="2" />
<text  x="1182.98" y="207.5" ></text>
</g>
<g >
<title>irq_exit (2 samples, 0.08%)</title><rect x="1180.0" y="165" width="1.0" height="15.0" fill="rgb(240,212,51)" rx="2" ry="2" />
<text  x="1182.98" y="175.5" ></text>
</g>
<g >
<title>jni_CallStaticVoidMethod (13 samples, 0.55%)</title><rect x="1183.5" y="245" width="6.5" height="15.0" fill="rgb(227,5,30)" rx="2" ry="2" />
<text  x="1186.49" y="255.5" ></text>
</g>
<g >
<title>__schedule      (1 samples, 0.04%)</title><rect x="835.7" y="101" width="0.6" height="15.0" fill="rgb(250,55,21)" rx="2" ry="2" />
<text  x="838.75" y="111.5" ></text>
</g>
<g >
<title>irq_exit (7 samples, 0.30%)</title><rect x="1055.2" y="165" width="3.5" height="15.0" fill="rgb(246,124,10)" rx="2" ry="2" />
<text  x="1058.21" y="175.5" ></text>
</g>
<g >
<title>Monitor::wait_without_safepoint_check(long) (1 samples, 0.04%)</title><rect x="1183.0" y="213" width="0.5" height="15.0" fill="rgb(222,122,35)" rx="2" ry="2" />
<text  x="1185.99" y="223.5" ></text>
</g>
<g >
<title>ParallelCompactData::add_obj(HeapWordImpl**, unsigned long) (7 samples, 0.30%)</title><rect x="916.9" y="181" width="3.5" height="15.0" fill="rgb(246,169,29)" rx="2" ry="2" />
<text  x="919.92" y="191.5" ></text>
</g>
<g >
<title>vgdrvHeartbeatTimerHandler (7 samples, 0.30%)</title><rect x="916.9" y="53" width="3.5" height="15.0" fill="rgb(205,143,19)" rx="2" ry="2" />
<text  x="919.92" y="63.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*)      (24 samples, 1.02%)</title><rect x="358.2" y="213" width="12.1" height="15.0" fill="rgb(229,177,34)" rx="2" ry="2" />
<text  x="361.24" y="223.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (8 samples, 0.34%)</title><rect x="1051.2" y="149" width="4.0" height="15.0" fill="rgb(209,74,6)" rx="2" ry="2" />
<text  x="1054.21" y="159.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (4 samples, 0.17%)</title><rect x="33.0" y="133" width="2.1" height="15.0" fill="rgb(244,183,48)" rx="2" ry="2" />
<text  x="36.05" y="143.5" ></text>
</g>
<g >
<title>Main.loop (12 samples, 0.51%)</title><rect x="1184.0" y="165" width="6.0" height="15.0" fill="rgb(229,116,22)" rx="2" ry="2" />
<text  x="1186.99" y="175.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*) (929 samples, 39.45%)</title><rect x="589.7" y="197" width="465.5" height="15.0" fill="rgb(252,121,49)" rx="2" ry="2" />
<text  x="592.73" y="207.5" >ParCompactionManager::follow_contents(oopDesc*)</text>
</g>
<g >
<title>ParCompactionManager::follow_marking_stacks() (1,063 samples, 45.14%)</title><rect x="531.1" y="213" width="532.6" height="15.0" fill="rgb(251,205,54)" rx="2" ry="2" />
<text  x="534.10" y="223.5" >ParCompactionManager::follow_marking_stacks()</text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (89 samples, 3.78%)</title><rect x="211.4" y="181" width="44.6" height="15.0" fill="rgb(229,48,12)" rx="2" ry="2" />
<text  x="214.43" y="191.5" >void..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (7 samples, 0.30%)</title><rect x="1055.2" y="181" width="3.5" height="15.0" fill="rgb(230,140,45)" rx="2" ry="2" />
<text  x="1058.21" y="191.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const      (1 samples, 0.04%)</title><rect x="35.1" y="117" width="0.5" height="15.0" fill="rgb(214,203,7)" rx="2" ry="2" />
<text  x="38.05" y="127.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (9 samples, 0.38%)</title><rect x="251.0" y="117" width="4.5" height="15.0" fill="rgb(236,209,19)" rx="2" ry="2" />
<text  x="254.01" y="127.5" ></text>
</g>
<g >
<title>[UNKNOWN] (3 samples, 0.13%)</title><rect x="1181.0" y="293" width="1.5" height="15.0" fill="rgb(215,129,1)" rx="2" ry="2" />
<text  x="1183.98" y="303.5" ></text>
</g>
<g >
<title>ParallelCompactData::add_obj(HeapWordImpl**, unsigned long)      (80 samples, 3.40%)</title><rect x="1139.9" y="213" width="40.1" height="15.0" fill="rgb(237,137,0)" rx="2" ry="2" />
<text  x="1142.89" y="223.5" >Par..</text>
</g>
<g >
<title>VbglR0GRPerform      (2 samples, 0.08%)</title><rect x="1057.7" y="69" width="1.0" height="15.0" fill="rgb(212,11,39)" rx="2" ry="2" />
<text  x="1060.72" y="79.5" ></text>
</g>
<g >
<title>ParCompactionManager::drain_region_stacks() (58 samples, 2.46%)</title><rect x="16.5" y="213" width="29.1" height="15.0" fill="rgb(207,19,2)" rx="2" ry="2" />
<text  x="19.51" y="223.5" >Pa..</text>
</g>
<g >
<title>smp_apic_timer_interrupt (2 samples, 0.08%)</title><rect x="1180.0" y="181" width="1.0" height="15.0" fill="rgb(216,218,16)" rx="2" ry="2" />
<text  x="1182.98" y="191.5" ></text>
</g>
<g >
<title>__schedule (1 samples, 0.04%)</title><rect x="836.3" y="101" width="0.5" height="15.0" fill="rgb(214,223,24)" rx="2" ry="2" />
<text  x="839.25" y="111.5" ></text>
</g>
<g >
<title>__clock_gettime (1 samples, 0.04%)</title><rect x="1182.0" y="277" width="0.5" height="15.0" fill="rgb(235,174,22)" rx="2" ry="2" />
<text  x="1184.98" y="287.5" ></text>
</g>
<g >
<title>rtTimerLinuxStdCallback (7 samples, 0.30%)</title><rect x="916.9" y="69" width="3.5" height="15.0" fill="rgb(214,5,28)" rx="2" ry="2" />
<text  x="919.92" y="79.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (9 samples, 0.38%)</title><rect x="40.6" y="165" width="4.5" height="15.0" fill="rgb(207,60,52)" rx="2" ry="2" />
<text  x="43.56" y="175.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (3 samples, 0.13%)</title><rect x="340.7" y="197" width="1.5" height="15.0" fill="rgb(220,10,43)" rx="2" ry="2" />
<text  x="343.70" y="207.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, ParMarkBitMapClosure*, unsigned long, unsigned long, unsigned long) const      (146 samples, 6.20%)</title><rect x="48.1" y="213" width="73.1" height="15.0" fill="rgb(210,159,51)" rx="2" ry="2" />
<text  x="51.08" y="223.5" >ParMarkB..</text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long) (9 samples, 0.38%)</title><rect x="832.2" y="181" width="4.6" height="15.0" fill="rgb(223,5,7)" rx="2" ry="2" />
<text  x="835.24" y="191.5" ></text>
</g>
<g >
<title>PSParallelCompact::fill_region(ParCompactionManager*, unsigned long) (58 samples, 2.46%)</title><rect x="16.5" y="197" width="29.1" height="15.0" fill="rgb(219,174,25)" rx="2" ry="2" />
<text  x="19.51" y="207.5" >PS..</text>
</g>
<g >
<title>irq_exit (7 samples, 0.30%)</title><rect x="832.2" y="133" width="3.5" height="15.0" fill="rgb(206,11,45)" rx="2" ry="2" />
<text  x="835.24" y="143.5" ></text>
</g>
<g >
<title>swake_up (2 samples, 0.08%)</title><rect x="1054.2" y="53" width="1.0" height="15.0" fill="rgb(211,146,1)" rx="2" ry="2" />
<text  x="1057.21" y="63.5" ></text>
</g>
<g >
<title>GCTaskManager::note_completion(unsigned int) (1 samples, 0.04%)</title><rect x="45.6" y="229" width="0.5" height="15.0" fill="rgb(242,199,19)" rx="2" ry="2" />
<text  x="48.58" y="239.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (3 samples, 0.13%)</title><rect x="340.7" y="181" width="1.5" height="15.0" fill="rgb(235,118,7)" rx="2" ry="2" />
<text  x="343.70" y="191.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (2,324 samples, 98.68%)</title><rect x="16.5" y="277" width="1164.5" height="15.0" fill="rgb(214,127,50)" rx="2" ry="2" />
<text  x="19.51" y="287.5" >thread_native_entry(Thread*)</text>
</g>
<g >
<title>do_page_fault (1 samples, 0.04%)</title><rect x="1058.7" y="181" width="0.5" height="15.0" fill="rgb(239,84,26)" rx="2" ry="2" />
<text  x="1061.72" y="191.5" ></text>
</g>
<g >
<title>WatcherThread::run() (1 samples, 0.04%)</title><rect x="1183.0" y="245" width="0.5" height="15.0" fill="rgb(231,146,35)" rx="2" ry="2" />
<text  x="1185.99" y="255.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*) (12 samples, 0.51%)</title><rect x="352.2" y="197" width="6.0" height="15.0" fill="rgb(212,164,16)" rx="2" ry="2" />
<text  x="355.23" y="207.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (7 samples, 0.30%)</title><rect x="832.2" y="117" width="3.5" height="15.0" fill="rgb(206,102,28)" rx="2" ry="2" />
<text  x="835.24" y="127.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="1139.4" y="149" width="0.5" height="15.0" fill="rgb(250,18,9)" rx="2" ry="2" />
<text  x="1142.39" y="159.5" ></text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long) (250 samples, 10.62%)</title><rect x="135.3" y="197" width="125.2" height="15.0" fill="rgb(254,122,51)" rx="2" ry="2" />
<text  x="138.27" y="207.5" >UpdateOnlyClosu..</text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const (7 samples, 0.30%)</title><rect x="354.7" y="181" width="3.5" height="15.0" fill="rgb(254,10,11)" rx="2" ry="2" />
<text  x="357.73" y="191.5" ></text>
</g>
<g >
<title>all (2,355 samples, 100%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(221,207,47)" rx="2" ry="2" />
<text  x="13.00" y="335.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*) (11 samples, 0.47%)</title><rect x="35.1" y="133" width="5.5" height="15.0" fill="rgb(217,227,31)" rx="2" ry="2" />
<text  x="38.05" y="143.5" ></text>
</g>
<g >
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (1 samples, 0.04%)</title><rect x="1182.5" y="293" width="0.5" height="15.0" fill="rgb(245,92,17)" rx="2" ry="2" />
<text  x="1185.48" y="303.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (2 samples, 0.08%)</title><rect x="1180.0" y="149" width="1.0" height="15.0" fill="rgb(221,52,52)" rx="2" ry="2" />
<text  x="1182.98" y="159.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (7 samples, 0.30%)</title><rect x="916.9" y="165" width="3.5" height="15.0" fill="rgb(228,17,34)" rx="2" ry="2" />
<text  x="919.92" y="175.5" ></text>
</g>
<g >
<title>thread_native_entry(Thread*) (1 samples, 0.04%)</title><rect x="1183.0" y="277" width="0.5" height="15.0" fill="rgb(238,155,17)" rx="2" ry="2" />
<text  x="1185.99" y="287.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (6 samples, 0.25%)</title><rect x="256.0" y="181" width="3.0" height="15.0" fill="rgb(216,13,17)" rx="2" ry="2" />
<text  x="259.02" y="191.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (1 samples, 0.04%)</title><rect x="1181.0" y="277" width="0.5" height="15.0" fill="rgb(254,162,1)" rx="2" ry="2" />
<text  x="1183.98" y="287.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="45.1" y="133" width="0.5" height="15.0" fill="rgb(245,166,30)" rx="2" ry="2" />
<text  x="48.07" y="143.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1182.5" y="261" width="0.5" height="15.0" fill="rgb(221,73,15)" rx="2" ry="2" />
<text  x="1185.48" y="271.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.08%)</title><rect x="835.7" y="117" width="1.1" height="15.0" fill="rgb(222,63,16)" rx="2" ry="2" />
<text  x="838.75" y="127.5" ></text>
</g>
<g >
<title>vgdrvHeartbeatTimerHandler (2 samples, 0.08%)</title><rect x="1057.7" y="85" width="1.0" height="15.0" fill="rgb(246,221,18)" rx="2" ry="2" />
<text  x="1060.72" y="95.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.04%)</title><rect x="255.5" y="165" width="0.5" height="15.0" fill="rgb(205,216,52)" rx="2" ry="2" />
<text  x="258.52" y="175.5" ></text>
</g>
<g >
<title>GCTaskThread::run() (2,324 samples, 98.68%)</title><rect x="16.5" y="245" width="1164.5" height="15.0" fill="rgb(233,199,21)" rx="2" ry="2" />
<text  x="19.51" y="255.5" >GCTaskThread::run()</text>
</g>
<g >
<title>mem_cgroup_from_task      (1 samples, 0.04%)</title><rect x="1058.7" y="149" width="0.5" height="15.0" fill="rgb(239,4,44)" rx="2" ry="2" />
<text  x="1061.72" y="159.5" ></text>
</g>
<g >
<title>ClassLoaderData::oops_do(OopClosure*, int, bool)      (20 samples, 0.85%)</title><rect x="589.7" y="181" width="10.0" height="15.0" fill="rgb(235,155,17)" rx="2" ry="2" />
<text  x="592.73" y="191.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_marking_stacks() (4 samples, 0.17%)</title><rect x="46.1" y="213" width="2.0" height="15.0" fill="rgb(214,223,49)" rx="2" ry="2" />
<text  x="49.08" y="223.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (13 samples, 0.55%)</title><rect x="342.2" y="213" width="6.5" height="15.0" fill="rgb(235,110,49)" rx="2" ry="2" />
<text  x="345.20" y="223.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (1 samples, 0.04%)</title><rect x="255.5" y="149" width="0.5" height="15.0" fill="rgb(250,131,14)" rx="2" ry="2" />
<text  x="258.52" y="159.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (5 samples, 0.21%)</title><rect x="1055.2" y="149" width="2.5" height="15.0" fill="rgb(215,38,42)" rx="2" ry="2" />
<text  x="1058.21" y="159.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (3 samples, 0.13%)</title><rect x="259.0" y="165" width="1.5" height="15.0" fill="rgb(228,33,0)" rx="2" ry="2" />
<text  x="262.03" y="175.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (6 samples, 0.25%)</title><rect x="1051.2" y="117" width="3.0" height="15.0" fill="rgb(252,81,54)" rx="2" ry="2" />
<text  x="1054.21" y="127.5" ></text>
</g>
<g >
<title>rcu_gp_kthread_wake (2 samples, 0.08%)</title><rect x="1054.2" y="69" width="1.0" height="15.0" fill="rgb(233,50,14)" rx="2" ry="2" />
<text  x="1057.21" y="79.5" ></text>
</g>
<g >
<title>start_thread (2,324 samples, 98.68%)</title><rect x="16.5" y="293" width="1164.5" height="15.0" fill="rgb(230,110,1)" rx="2" ry="2" />
<text  x="19.51" y="303.5" >start_thread</text>
</g>
<g >
<title>ParGC Thread#0 (2,337 samples, 99.24%)</title><rect x="10.0" y="309" width="1171.0" height="15.0" fill="rgb(247,222,37)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >ParGC Thread#0</text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range_helper(HeapWordImpl**, oopDesc*) const      (7 samples, 0.30%)</title><rect x="354.7" y="165" width="3.5" height="15.0" fill="rgb(223,80,45)" rx="2" ry="2" />
<text  x="357.73" y="175.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (7 samples, 0.30%)</title><rect x="916.9" y="149" width="3.5" height="15.0" fill="rgb(229,118,10)" rx="2" ry="2" />
<text  x="919.92" y="159.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="45.1" y="149" width="0.5" height="15.0" fill="rgb(233,137,3)" rx="2" ry="2" />
<text  x="48.07" y="159.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (8 samples, 0.34%)</title><rect x="1051.2" y="165" width="4.0" height="15.0" fill="rgb(212,185,28)" rx="2" ry="2" />
<text  x="1054.21" y="175.5" ></text>
</g>
<g >
<title>ParallelCompactData::add_obj(HeapWordImpl**, unsigned long) (2 samples, 0.08%)</title><rect x="1180.0" y="213" width="1.0" height="15.0" fill="rgb(239,224,14)" rx="2" ry="2" />
<text  x="1182.98" y="223.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, ParMarkBitMapClosure*, unsigned long, unsigned long, unsigned long) const (299 samples, 12.70%)</title><rect x="121.2" y="213" width="149.9" height="15.0" fill="rgb(247,61,33)" rx="2" ry="2" />
<text  x="124.24" y="223.5" >ParMarkBitMap::iter..</text>
</g>
<g >
<title>ParCompactionManager::follow_marking_stacks()      (321 samples, 13.63%)</title><rect x="370.3" y="213" width="160.8" height="15.0" fill="rgb(233,90,9)" rx="2" ry="2" />
<text  x="373.26" y="223.5" >ParCompactionManager..</text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long)      (28 samples, 1.19%)</title><rect x="121.2" y="197" width="14.1" height="15.0" fill="rgb(220,142,27)" rx="2" ry="2" />
<text  x="124.24" y="207.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const      (5 samples, 0.21%)</title><rect x="16.5" y="181" width="2.5" height="15.0" fill="rgb(232,42,2)" rx="2" ry="2" />
<text  x="19.51" y="191.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (3 samples, 0.13%)</title><rect x="259.0" y="181" width="1.5" height="15.0" fill="rgb(238,0,9)" rx="2" ry="2" />
<text  x="262.03" y="191.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (1 samples, 0.04%)</title><rect x="1139.4" y="197" width="0.5" height="15.0" fill="rgb(228,135,26)" rx="2" ry="2" />
<text  x="1142.39" y="207.5" ></text>
</g>
<g >
<title>call_stub (13 samples, 0.55%)</title><rect x="1183.5" y="197" width="6.5" height="15.0" fill="rgb(208,10,42)" rx="2" ry="2" />
<text  x="1186.49" y="207.5" ></text>
</g>
<g >
<title>ParMarkBitMap::iterate(ParMarkBitMapClosure*, unsigned long, unsigned long) const (53 samples, 2.25%)</title><rect x="19.0" y="181" width="26.6" height="15.0" fill="rgb(235,181,43)" rx="2" ry="2" />
<text  x="22.02" y="191.5" >P..</text>
</g>
<g >
<title>os::PlatformMonitor::wait(long)      (1 samples, 0.04%)</title><rect x="1183.0" y="197" width="0.5" height="15.0" fill="rgb(253,130,53)" rx="2" ry="2" />
<text  x="1185.99" y="207.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range(ParCompactionManager*, HeapWordImpl**, oopDesc*) const (10 samples, 0.42%)</title><rect x="35.6" y="117" width="5.0" height="15.0" fill="rgb(234,101,25)" rx="2" ry="2" />
<text  x="38.55" y="127.5" ></text>
</g>
<g >
<title>ParCompactionManager::follow_contents(oopDesc*)      (117 samples, 4.97%)</title><rect x="531.1" y="197" width="58.6" height="15.0" fill="rgb(208,188,47)" rx="2" ry="2" />
<text  x="534.10" y="207.5" >ParCom..</text>
</g>
<g >
<title>WatcherThread::sleep() const (1 samples, 0.04%)</title><rect x="1183.0" y="229" width="0.5" height="15.0" fill="rgb(208,183,8)" rx="2" ry="2" />
<text  x="1185.99" y="239.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="1139.4" y="165" width="0.5" height="15.0" fill="rgb(224,8,35)" rx="2" ry="2" />
<text  x="1142.39" y="175.5" ></text>
</g>
<g >
<title>Thread::call_run() (2,324 samples, 98.68%)</title><rect x="16.5" y="261" width="1164.5" height="15.0" fill="rgb(206,44,32)" rx="2" ry="2" />
<text  x="19.51" y="271.5" >Thread::call_run()</text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long) (3 samples, 0.13%)</title><rect x="340.7" y="213" width="1.5" height="15.0" fill="rgb(244,199,24)" rx="2" ry="2" />
<text  x="343.70" y="223.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (1 samples, 0.04%)</title><rect x="271.1" y="213" width="0.5" height="15.0" fill="rgb(244,144,23)" rx="2" ry="2" />
<text  x="274.05" y="223.5" ></text>
</g>
<g >
<title>do_futex      (1 samples, 0.04%)</title><rect x="1182.5" y="229" width="0.5" height="15.0" fill="rgb(206,151,40)" rx="2" ry="2" />
<text  x="1185.48" y="239.5" ></text>
</g>
<g >
<title>page_fault (1 samples, 0.04%)</title><rect x="1058.7" y="197" width="0.5" height="15.0" fill="rgb(229,172,30)" rx="2" ry="2" />
<text  x="1061.72" y="207.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (7 samples, 0.30%)</title><rect x="1055.2" y="197" width="3.5" height="15.0" fill="rgb(228,49,29)" rx="2" ry="2" />
<text  x="1058.21" y="207.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (15 samples, 0.64%)</title><rect x="33.0" y="149" width="7.6" height="15.0" fill="rgb(214,191,38)" rx="2" ry="2" />
<text  x="36.05" y="159.5" ></text>
</g>
<g >
<title>ParMarkBitMap::live_words_in_range_helper(HeapWordImpl**, oopDesc*) const      (10 samples, 0.42%)</title><rect x="35.6" y="101" width="5.0" height="15.0" fill="rgb(244,57,34)" rx="2" ry="2" />
<text  x="38.55" y="111.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (9 samples, 0.38%)</title><rect x="251.0" y="149" width="4.5" height="15.0" fill="rgb(240,43,49)" rx="2" ry="2" />
<text  x="254.01" y="159.5" ></text>
</g>
<g >
<title>__pthread_mutex_lock      (1 samples, 0.04%)</title><rect x="45.6" y="213" width="0.5" height="15.0" fill="rgb(231,153,5)" rx="2" ry="2" />
<text  x="48.58" y="223.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (2 samples, 0.08%)</title><rect x="835.7" y="149" width="1.1" height="15.0" fill="rgb(216,85,25)" rx="2" ry="2" />
<text  x="838.75" y="159.5" ></text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long) (1 samples, 0.04%)</title><rect x="1139.4" y="213" width="0.5" height="15.0" fill="rgb(217,108,28)" rx="2" ry="2" />
<text  x="1142.39" y="223.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (7 samples, 0.30%)</title><rect x="141.8" y="181" width="3.5" height="15.0" fill="rgb(249,101,5)" rx="2" ry="2" />
<text  x="144.78" y="191.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.08%)</title><rect x="1054.2" y="117" width="1.0" height="15.0" fill="rgb(218,106,10)" rx="2" ry="2" />
<text  x="1057.21" y="127.5" ></text>
</g>
<g >
<title>ThreadJavaMain (13 samples, 0.55%)</title><rect x="1183.5" y="277" width="6.5" height="15.0" fill="rgb(211,206,2)" rx="2" ry="2" />
<text  x="1186.49" y="287.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (132 samples, 5.61%)</title><rect x="145.3" y="181" width="66.1" height="15.0" fill="rgb(249,141,41)" rx="2" ry="2" />
<text  x="148.29" y="191.5" >void Oo..</text>
</g>
<g >
<title>Main.count      (12 samples, 0.51%)</title><rect x="1184.0" y="149" width="6.0" height="15.0" fill="rgb(226,215,3)" rx="2" ry="2" />
<text  x="1186.99" y="159.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (7 samples, 0.30%)</title><rect x="348.7" y="197" width="3.5" height="15.0" fill="rgb(218,57,26)" rx="2" ry="2" />
<text  x="351.72" y="207.5" ></text>
</g>
<g >
<title>ParallelCompactData::calc_new_pointer(HeapWordImpl**, ParCompactionManager*)      (79 samples, 3.35%)</title><rect x="211.4" y="165" width="39.6" height="15.0" fill="rgb(214,8,29)" rx="2" ry="2" />
<text  x="214.43" y="175.5" >Par..</text>
</g>
<g >
<title>__softirqentry_text_start (7 samples, 0.30%)</title><rect x="916.9" y="117" width="3.5" height="15.0" fill="rgb(210,58,35)" rx="2" ry="2" />
<text  x="919.92" y="127.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*)      (260 samples, 11.04%)</title><rect x="920.9" y="181" width="130.3" height="15.0" fill="rgb(210,108,47)" rx="2" ry="2" />
<text  x="923.93" y="191.5" >void OopOopItera..</text>
</g>
<g >
<title>VbglR0GRPerform      (7 samples, 0.30%)</title><rect x="916.9" y="37" width="3.5" height="15.0" fill="rgb(205,135,15)" rx="2" ry="2" />
<text  x="919.92" y="47.5" ></text>
</g>
<g >
<title>Klass::start_of_vtable() const      (13 samples, 0.55%)</title><rect x="135.3" y="181" width="6.5" height="15.0" fill="rgb(248,149,7)" rx="2" ry="2" />
<text  x="138.27" y="191.5" ></text>
</g>
<g >
<title>JavaMain (13 samples, 0.55%)</title><rect x="1183.5" y="261" width="6.5" height="15.0" fill="rgb(230,100,25)" rx="2" ry="2" />
<text  x="1186.49" y="271.5" ></text>
</g>
<g >
<title>      (13 samples, 0.55%)</title><rect x="10.0" y="293" width="6.5" height="15.0" fill="rgb(212,147,10)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>call_timer_fn (2 samples, 0.08%)</title><rect x="1057.7" y="117" width="1.0" height="15.0" fill="rgb(216,98,24)" rx="2" ry="2" />
<text  x="1060.72" y="127.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.08%)</title><rect x="1057.7" y="149" width="1.0" height="15.0" fill="rgb(212,209,14)" rx="2" ry="2" />
<text  x="1060.72" y="159.5" ></text>
</g>
<g >
<title>CompactionWithStealingTask::do_it(GCTaskManager*, unsigned int) (58 samples, 2.46%)</title><rect x="16.5" y="229" width="29.1" height="15.0" fill="rgb(249,149,50)" rx="2" ry="2" />
<text  x="19.51" y="239.5" >Co..</text>
</g>
<g >
<title>ParallelCompactData::add_obj(HeapWordImpl**, unsigned long)      (160 samples, 6.79%)</title><rect x="836.8" y="181" width="80.1" height="15.0" fill="rgb(224,196,40)" rx="2" ry="2" />
<text  x="839.75" y="191.5" >ParallelC..</text>
</g>
<g >
<title>VM Periodic Tas (5 samples, 0.21%)</title><rect x="1181.0" y="309" width="2.5" height="15.0" fill="rgb(238,99,11)" rx="2" ry="2" />
<text  x="1183.98" y="319.5" ></text>
</g>
<g >
<title>[UNKNOWN] (1 samples, 0.04%)</title><rect x="45.1" y="165" width="0.5" height="15.0" fill="rgb(214,118,24)" rx="2" ry="2" />
<text  x="48.07" y="175.5" ></text>
</g>
<g >
<title>PSParallelCompact::fill_blocks(unsigned long)      (5 samples, 0.21%)</title><rect x="352.2" y="181" width="2.5" height="15.0" fill="rgb(215,81,24)" rx="2" ry="2" />
<text  x="355.23" y="191.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (3 samples, 0.13%)</title><rect x="340.7" y="149" width="1.5" height="15.0" fill="rgb(224,84,1)" rx="2" ry="2" />
<text  x="343.70" y="159.5" ></text>
</g>
<g >
<title>ret_from_intr (1 samples, 0.04%)</title><rect x="920.4" y="181" width="0.5" height="15.0" fill="rgb(241,12,45)" rx="2" ry="2" />
<text  x="923.43" y="191.5" ></text>
</g>
<g >
<title>java (13 samples, 0.55%)</title><rect x="1183.5" y="309" width="6.5" height="15.0" fill="rgb(221,202,48)" rx="2" ry="2" />
<text  x="1186.49" y="319.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (7 samples, 0.30%)</title><rect x="832.2" y="165" width="3.5" height="15.0" fill="rgb(215,128,20)" rx="2" ry="2" />
<text  x="835.24" y="175.5" ></text>
</g>
<g >
<title>do_IRQ (1 samples, 0.04%)</title><rect x="920.4" y="165" width="0.5" height="15.0" fill="rgb(206,166,32)" rx="2" ry="2" />
<text  x="923.43" y="175.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (2 samples, 0.08%)</title><rect x="835.7" y="165" width="1.1" height="15.0" fill="rgb(206,61,5)" rx="2" ry="2" />
<text  x="838.75" y="175.5" ></text>
</g>
<g >
<title>jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) [clone .isra.83] [clone .constprop.254] (13 samples, 0.55%)</title><rect x="1183.5" y="229" width="6.5" height="15.0" fill="rgb(227,10,1)" rx="2" ry="2" />
<text  x="1186.49" y="239.5" ></text>
</g>
<g >
<title>sys_futex (1 samples, 0.04%)</title><rect x="1182.5" y="245" width="0.5" height="15.0" fill="rgb(253,198,46)" rx="2" ry="2" />
<text  x="1185.48" y="255.5" ></text>
</g>
<g >
<title>irq_exit (7 samples, 0.30%)</title><rect x="916.9" y="133" width="3.5" height="15.0" fill="rgb(209,118,40)" rx="2" ry="2" />
<text  x="919.92" y="143.5" ></text>
</g>
<g >
<title>run_timer_softirq (7 samples, 0.30%)</title><rect x="916.9" y="101" width="3.5" height="15.0" fill="rgb(218,209,38)" rx="2" ry="2" />
<text  x="919.92" y="111.5" ></text>
</g>
<g >
<title>Interpreter (13 samples, 0.55%)</title><rect x="1183.5" y="181" width="6.5" height="15.0" fill="rgb(244,127,21)" rx="2" ry="2" />
<text  x="1186.49" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="1139.4" y="181" width="0.5" height="15.0" fill="rgb(211,206,32)" rx="2" ry="2" />
<text  x="1142.39" y="191.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="920.4" y="149" width="0.5" height="15.0" fill="rgb(252,87,17)" rx="2" ry="2" />
<text  x="923.43" y="159.5" ></text>
</g>
<g >
<title>JavaCalls::call_helper(JavaValue*, methodHandle const&amp;, JavaCallArguments*, Thread*) (13 samples, 0.55%)</title><rect x="1183.5" y="213" width="6.5" height="15.0" fill="rgb(218,68,34)" rx="2" ry="2" />
<text  x="1186.49" y="223.5" ></text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long)      (2 samples, 0.08%)</title><rect x="47.1" y="197" width="1.0" height="15.0" fill="rgb(235,164,50)" rx="2" ry="2" />
<text  x="50.08" y="207.5" ></text>
</g>
<g >
<title>[UNKNOWN]      (1 samples, 0.04%)</title><rect x="1182.0" y="261" width="0.5" height="15.0" fill="rgb(242,155,43)" rx="2" ry="2" />
<text  x="1184.98" y="271.5" ></text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="45.1" y="101" width="0.5" height="15.0" fill="rgb(225,180,53)" rx="2" ry="2" />
<text  x="48.07" y="111.5" ></text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long)      (151 samples, 6.41%)</title><rect x="1063.7" y="213" width="75.7" height="15.0" fill="rgb(251,215,38)" rx="2" ry="2" />
<text  x="1066.73" y="223.5" >ParMarkB..</text>
</g>
<g >
<title>exit_to_usermode_loop      (1 samples, 0.04%)</title><rect x="255.5" y="133" width="0.5" height="15.0" fill="rgb(210,209,44)" rx="2" ry="2" />
<text  x="258.52" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1182.5" y="277" width="0.5" height="15.0" fill="rgb(252,142,53)" rx="2" ry="2" />
<text  x="1185.48" y="287.5" ></text>
</g>
<g >
<title>start_thread (13 samples, 0.55%)</title><rect x="1183.5" y="293" width="6.5" height="15.0" fill="rgb(232,21,54)" rx="2" ry="2" />
<text  x="1186.49" y="303.5" ></text>
</g>
<g >
<title>run_timer_softirq (2 samples, 0.08%)</title><rect x="1057.7" y="133" width="1.0" height="15.0" fill="rgb(212,79,6)" rx="2" ry="2" />
<text  x="1060.72" y="143.5" ></text>
</g>
<g >
<title>ParMarkBitMap::mark_obj(HeapWordImpl**, unsigned long)      (453 samples, 19.24%)</title><rect x="605.3" y="181" width="226.9" height="15.0" fill="rgb(236,151,3)" rx="2" ry="2" />
<text  x="608.26" y="191.5" >ParMarkBitMap::mark_obj(HeapWo..</text>
</g>
<g >
<title>start_thread (1 samples, 0.04%)</title><rect x="1183.0" y="293" width="0.5" height="15.0" fill="rgb(241,176,21)" rx="2" ry="2" />
<text  x="1185.99" y="303.5" ></text>
</g>
<g >
<title>irq_exit (8 samples, 0.34%)</title><rect x="1051.2" y="133" width="4.0" height="15.0" fill="rgb(253,210,0)" rx="2" ry="2" />
<text  x="1054.21" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_unlock_irqrestore      (2 samples, 0.08%)</title><rect x="1054.2" y="37" width="1.0" height="15.0" fill="rgb(229,128,34)" rx="2" ry="2" />
<text  x="1057.21" y="47.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (9 samples, 0.38%)</title><rect x="28.5" y="149" width="4.5" height="15.0" fill="rgb(240,159,36)" rx="2" ry="2" />
<text  x="31.54" y="159.5" ></text>
</g>
<g >
<title>irq_exit (1 samples, 0.04%)</title><rect x="45.1" y="117" width="0.5" height="15.0" fill="rgb(223,176,37)" rx="2" ry="2" />
<text  x="48.07" y="127.5" ></text>
</g>
<g >
<title>Thread::call_run() (1 samples, 0.04%)</title><rect x="1183.0" y="261" width="0.5" height="15.0" fill="rgb(251,209,21)" rx="2" ry="2" />
<text  x="1185.99" y="271.5" ></text>
</g>
<g >
<title>irq_exit (3 samples, 0.13%)</title><rect x="340.7" y="165" width="1.5" height="15.0" fill="rgb(218,22,32)" rx="2" ry="2" />
<text  x="343.70" y="175.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*)      (21 samples, 0.89%)</title><rect x="260.5" y="197" width="10.6" height="15.0" fill="rgb(230,134,2)" rx="2" ry="2" />
<text  x="263.53" y="207.5" ></text>
</g>
<g >
<title>finish_task_switch      (1 samples, 0.04%)</title><rect x="836.3" y="85" width="0.5" height="15.0" fill="rgb(247,164,38)" rx="2" ry="2" />
<text  x="839.25" y="95.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (9 samples, 0.38%)</title><rect x="251.0" y="165" width="4.5" height="15.0" fill="rgb(223,80,35)" rx="2" ry="2" />
<text  x="254.01" y="175.5" ></text>
</g>
<g >
<title>Klass::start_of_vtable() const      (11 samples, 0.47%)</title><rect x="599.7" y="181" width="5.6" height="15.0" fill="rgb(252,31,5)" rx="2" ry="2" />
<text  x="602.75" y="191.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (7 samples, 0.30%)</title><rect x="832.2" y="149" width="3.5" height="15.0" fill="rgb(244,41,42)" rx="2" ry="2" />
<text  x="835.24" y="159.5" ></text>
</g>
<g >
<title>UpdateOnlyClosure::do_addr(HeapWordImpl**, unsigned long)      (138 samples, 5.86%)</title><rect x="271.6" y="213" width="69.1" height="15.0" fill="rgb(236,95,19)" rx="2" ry="2" />
<text  x="274.55" y="223.5" >UpdateO..</text>
</g>
<g >
<title>__softirqentry_text_start      (1 samples, 0.04%)</title><rect x="920.4" y="133" width="0.5" height="15.0" fill="rgb(214,229,4)" rx="2" ry="2" />
<text  x="923.43" y="143.5" ></text>
</g>
<g >
<title>Main.loop      (1 samples, 0.04%)</title><rect x="1183.5" y="165" width="0.5" height="15.0" fill="rgb(236,85,52)" rx="2" ry="2" />
<text  x="1186.49" y="175.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCIterateMarkAndPushClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(PCIterateMarkAndPushClosure*, oopDesc*, Klass*) (8 samples, 0.34%)</title><rect x="1051.2" y="181" width="4.0" height="15.0" fill="rgb(236,38,42)" rx="2" ry="2" />
<text  x="1054.21" y="191.5" ></text>
</g>
<g >
<title>MoveAndUpdateClosure::do_addr(HeapWordImpl**, unsigned long)      (19 samples, 0.81%)</title><rect x="19.0" y="165" width="9.5" height="15.0" fill="rgb(235,130,29)" rx="2" ry="2" />
<text  x="22.02" y="175.5" ></text>
</g>
<g >
<title>ThreadRootsMarkingTask::do_it(GCTaskManager*, unsigned int) (1,642 samples, 69.72%)</title><rect x="358.2" y="229" width="822.8" height="15.0" fill="rgb(243,210,8)" rx="2" ry="2" />
<text  x="361.24" y="239.5" >ThreadRootsMarkingTask::do_it(GCTaskManager*, unsigned int)</text>
</g>
<g >
<title>MarkFromRootsTask::do_it(GCTaskManager*, unsigned int) (4 samples, 0.17%)</title><rect x="46.1" y="229" width="2.0" height="15.0" fill="rgb(230,98,14)" rx="2" ry="2" />
<text  x="49.08" y="239.5" ></text>
</g>
<g >
<title>__clock_gettime      (1 samples, 0.04%)</title><rect x="1181.5" y="277" width="0.5" height="15.0" fill="rgb(254,153,7)" rx="2" ry="2" />
<text  x="1184.48" y="287.5" ></text>
</g>
<g >
<title>irq_exit (9 samples, 0.38%)</title><rect x="251.0" y="133" width="4.5" height="15.0" fill="rgb(214,176,29)" rx="2" ry="2" />
<text  x="254.01" y="143.5" ></text>
</g>
<g >
<title>call_timer_fn (7 samples, 0.30%)</title><rect x="916.9" y="85" width="3.5" height="15.0" fill="rgb(213,43,48)" rx="2" ry="2" />
<text  x="919.92" y="95.5" ></text>
</g>
<g >
<title>void OopOopIterateDispatch&lt;PCAdjustPointerClosure&gt;::Table::oop_oop_iterate&lt;ObjArrayKlass, unsigned int&gt;(PCAdjustPointerClosure*, oopDesc*, Klass*) (19 samples, 0.81%)</title><rect x="348.7" y="213" width="9.5" height="15.0" fill="rgb(248,62,13)" rx="2" ry="2" />
<text  x="351.72" y="223.5" ></text>
</g>
</g>
</svg>
